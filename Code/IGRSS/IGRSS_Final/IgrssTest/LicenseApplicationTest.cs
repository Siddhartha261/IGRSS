// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using IGRSS.BusinessLogicLayer;
using System.Data;
using IGRSS.DataAccessLayer;
using IGRSS.BusinessObjects;
namespace IgrssTest
{
    /// <summary>
    ///This is a test class for IGRSS.BusinessLogicLayer.LicenseApplication and is intended
    ///to contain all IGRSS.BusinessLogicLayer.LicenseApplication Unit Tests
    ///</summary>
    [TestClass()]
    public class LicenseApplicationTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        ///// <summary>
        /////A test for ApprovedVendorLicense (Guid, string, DateTime, DateTime, DateTime, Guid)
        /////</summary>
        //[TestMethod()]
        //public void ApprovedVendorLicenseTest()
        //{
        //    LicenseApplication target = new LicenseApplication();

        //    Guid LicenseApplicationID = new Guid(); // TODO: Initialize to an appropriate value

        //    string LicenseNo = null; // TODO: Initialize to an appropriate value

        //    DateTime IssueDate = new DateTime(); // TODO: Initialize to an appropriate value

        //    DateTime EffectiveDate = new DateTime(); // TODO: Initialize to an appropriate value

        //    DateTime ExpiryDate = new DateTime(); // TODO: Initialize to an appropriate value

        //    Guid AlertId = new Guid(); // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.ApprovedVendorLicense(LicenseApplicationID, LicenseNo, IssueDate, EffectiveDate, ExpiryDate, AlertId);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.LicenseApplication.ApprovedVendorLicense did not return " +
        //            "the expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        /// <summary>
        ///A test for DeleteVendordetail (Guid)
        ///</summary>
        [TestMethod()]
        public void DeleteVendordetailTest()
        {
            IGRSS.BusinessLogicLayer.LicenseApplication target = new IGRSS.BusinessLogicLayer.LicenseApplication();
            Guid LicenseApplicationId = new Guid("2065eefc-1a3e-44ff-9d7d-5a863ad23393"); // TODO: Initialize to an appropriate value
         
            Assert.AreEqual(true, target.DeleteVendordetail(LicenseApplicationId), "IGRSS.BusinessLogicLayer.LicenseApplication.ApprovedVendorLicense did not return " +
                     "the expected value.");
        }

        /// <summary>
        ///A test for GetCompleteLicenseDetails (Guid)
        ///</summary>
        [TestMethod()]
        public void GetCompleteLicenseDetailsTest()
        {
            IGRSS.BusinessLogicLayer.LicenseApplication target = new IGRSS.BusinessLogicLayer.LicenseApplication();
            Guid LicenseApplicationId = new Guid("07d0b00b-34f4-48d6-8107-055bd21f7ec9"); // TODO: Initialize to an appropriate value
        
            Assert.IsInstanceOfType(target.GetCompleteLicenseDetails(LicenseApplicationId), typeof(IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable), "IGRSS.BusinessLogicLayer.LicenseApplication.GetCompleteLicenseDetails did not ret" +
                    "urn the expected value.");
        }

        

        /// <summary>
        ///A test for GetlicenseAppBylicenseAppID (Guid)
        ///</summary>
        [TestMethod()]
        public void GetlicenseAppBylicenseAppIDTest()
        {
            IGRSS.BusinessLogicLayer.LicenseApplication target = new IGRSS.BusinessLogicLayer.LicenseApplication();
            Guid LicenseApplicationId = new Guid("07d0b00b-34f4-48d6-8107-055bd21f7ec9"); // TODO: Initialize to an appropriate value
         
            Assert.IsInstanceOfType(target.GetCompleteLicenseDetails(LicenseApplicationId), typeof(IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable), "IGRSS.BusinessLogicLayer.LicenseApplication.GetCompleteLicenseDetails did not ret" +
                    "urn the expected value.");
         }

        /// <summary>
        ///A test for GetLicenseApplications ()
        ///</summary>
        [TestMethod()]
        public void GetLicenseApplicationsTest()
        {
            IGRSS.BusinessLogicLayer.LicenseApplication target = new IGRSS.BusinessLogicLayer.LicenseApplication();
          
            Assert.IsInstanceOfType(target.GetLicenseApplications(),typeof(IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable), "IGRSS.BusinessLogicLayer.LicenseApplication.GetCompleteLicenseDetails did not ret" +
                    "urn the expected value.");

          
        }

       

        /// <summary>
        ///A test for GetvendordetailByAppNumber (string)
        ///</summary>
        [TestMethod()]
        public void GetvendordetailByAppNumberTest()
        {
            IGRSS.BusinessLogicLayer.LicenseApplication target = new IGRSS.BusinessLogicLayer.LicenseApplication();
            string ApplnNumber ="exam002";
          
            Assert.IsInstanceOfType(target.GetvendordetailByAppNumber(ApplnNumber),typeof(IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable), "IGRSS.BusinessLogicLayer.LicenseApplication.GetCompleteLicenseDetails did not ret" +
                    "urn the expected value.");
         }

        /// <summary>
        ///A test for GetVendordetailByVendorName (string)
        ///</summary>
        [TestMethod()]
        public void GetVendordetailByVendorNameTest()
        {
            IGRSS.BusinessLogicLayer.LicenseApplication target = new IGRSS.BusinessLogicLayer.LicenseApplication();
            string NameOfApplicant ="testing";
            Assert.IsInstanceOfType(target.GetVendordetailByVendorName(NameOfApplicant), typeof(IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable), "IGRSS.BusinessLogicLayer.LicenseApplication.GetCompleteLicenseDetails did not ret" +
                    "urn the expected value.");
         }

        /// <summary>
        ///A test for GetVendordtlByLicenseNo (string)
        ///</summary>
        [TestMethod()]
        public void GetVendordtlByLicenseNoTest()
        {
            IGRSS.BusinessLogicLayer.LicenseApplication target = new IGRSS.BusinessLogicLayer.LicenseApplication();
            string LicenseNo ="com001";
            Assert.IsInstanceOfType(target.GetVendordtlByLicenseNo(LicenseNo), typeof(IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable), "IGRSS.BusinessLogicLayer.LicenseApplication.GetCompleteLicenseDetails did not ret" +
                    "urn the expected value.");
        }

        /// <summary>
        ///A test for NewLicenseApplication (FormViewParameter)
        ///</summary>
        [TestMethod()]
        public void NewLicenseApplicationTest()
        {
            
            IGRSS.BusinessLogicLayer.LicenseApplication target = new IGRSS.BusinessLogicLayer.LicenseApplication();
            FormViewParameter Parameter = new FormViewParameter();
            IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable dt = new  IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable();
            DataRow dr = dt.NewRow();
            dr["LicenseApplicationId"] = new Guid();
            dr["NameOfApplicant"] = "MADHUSMINA";
            dr["PresentAddress"] = "NAYA MUNDA WARD JAGDALPUR BASTAR";
            dr["PermanentAddress"] = "NAYA MUNDA WARD JAGDALPUR BASTAR";
            dr["DateOfBirth"] = DateTime.Now;
            dr["Qualification"] = "BSC";
            dr["Experience"] =5;
            dr["Caste"] = "obc";
            dr["BusinessAddress"] ="NAYA MUNDA WARD JAGDALPUR BASTAR"; 
            dr["TotalInvestmentAmount"] = 500;
            dr["NameAndAddressOfReferer"] = "NAYA MUNDA WARD JAGDALPUR BASTAR";
            dr["SubmissionOfficeId"] = new Guid("916fd082-061a-45fb-91a4-33967243b4cf");
            dr["ApplnNumber"] = "500";
            dr["HomePhone"] = 9886439408;
            dr["Remarks"] = "hai how r u";
            dt.Rows.Add(dr);
            Parameter.Values = dt.Rows[0];
            
            bool expected = true;
            Assert.AreEqual(expected,target.NewLicenseApplication(Parameter), "IGRSS.BusinessLogicLayer.LicenseApplication.NewLicenseApplication did not return " +
                    "the expected value.");
         }

        ///// <summary>
        /////A test for RejectVenorLicense (Guid)
        /////</summary>
        //[TestMethod()]
        //public void RejectVenorLicenseTest()
        //{
        //    LicenseApplication target = new LicenseApplication();

        //    Guid LicenseApplicationID = new Guid(); // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.RejectVenorLicense(LicenseApplicationID);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.LicenseApplication.RejectVenorLicense did not return the" +
        //            " expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        ///// <summary>
        /////A test for RenewAppDate (Guid, DateTime)
        /////</summary>
        //[TestMethod()]
        //public void RenewAppDateTest()
        //{
        //    LicenseApplication target = new LicenseApplication();

        //    Guid LicenseApplicationID = new Guid(); // TODO: Initialize to an appropriate value

        //    DateTime RenewApplicationDate = new DateTime(); // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.RenewAppDate(LicenseApplicationID, RenewApplicationDate);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.LicenseApplication.RenewAppDate did not return the expec" +
        //            "ted value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

         ///// <summary>
         /////A test for updateVendorsDetail (FormViewParameter, bool, Guid, Guid)
         /////</summary>
         //[TestMethod()]
         //public void updateVendorsDetailTest()
         //{
         //    IGRSS.BusinessLogicLayer.LicenseApplication target = new IGRSS.BusinessLogicLayer.LicenseApplication();
         //    FormViewParameter Parameter = new FormViewParameter();
         //    IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable dt = new IGRSS.DataAccessLayer.LicenseApplication.LicenseApplicationDataTable();
         //    DataRow dr = dt.NewRow();
         //    dr["LicenseApplicationId"] = new Guid();
         //    dr["NameOfApplicant"] = "MADHUSMINA";
         //    dr["PresentAddress"] = "NAYA MUNDA WARD JAGDALPUR BASTAR";
         //    dr["PermanentAddress"] = "NAYA MUNDA WARD JAGDALPUR BASTAR";
         //    dr["DateOfBirth"] = DateTime.Now;
         //    dr["Qualification"] = "BSC";
         //    dr["Experience"] = 5;
         //    dr["Caste"] = "obc";
         //    dr["BusinessAddress"] = "NAYA MUNDA WARD JAGDALPUR BASTAR";
         //    dr["TotalInvestmentAmount"] = 500;
         //    dr["NameAndAddressOfReferer"] = "NAYA MUNDA WARD JAGDALPUR BASTAR";
         //    dr["SubmissionOfficeId"] = new Guid("916fd082-061a-45fb-91a4-33967243b4cf");
         //    dr["ApplnNumber"] = "500";
         //    dr["HomePhone"] = 9886439408;
         //    dr["Remarks"] = "hai how r u";
         //    dt.Rows.Add(dr);
         //    Parameter.Values = dt.Rows[0];
         //    actual = target.updateVendorsDetail(Parameter, Verified, AlertId, LicenseApplicationId);

            
         //}

    }


}
