// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using IGRSS.BusinessLogicLayer;
using IGRSS.BusinessObjects;
using System.Data;
using IGRSS.DataAccessLayer;
namespace IgrssTest
{
    /// <summary>
    ///This is a test class for IGRSS.BusinessLogicLayer.Complain and is intended
    ///to contain all IGRSS.BusinessLogicLayer.Complain Unit Tests
    ///</summary>
    [TestClass()]
    public class ComplainTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AddInvestigatonDetail (Guid, DateTime, string)
        ///</summary>
        [TestMethod()]
        public void AddInvestigatonDetailTest()
        {
            IGRSS.BusinessLogicLayer.Complain target = new IGRSS.BusinessLogicLayer.Complain();
            Guid ComplainId = new Guid("5ef55527-79ee-49c8-8f23-220cd5ecc9fc"); // TODO: Initialize to an appropriate value
            DateTime InvDate = new DateTime(); // TODO: Initialize to an appropriate value
            string InvDetails ="this is investigated by pradeep as behalf of new"; // TODO: Initialize to an appropriate value
            Assert.AreEqual(true, target.AddInvestigatonDetail(ComplainId, InvDate, InvDetails), "IGRSS.BusinessLogicLayer.Complain.ComplainDetails did not return the expected value." +
                     "");
        }

        /// <summary>
        ///A test for AddNewComplain (FormViewParameter)
        ///</summary>
        [TestMethod()]
        public void AddNewComplainTest()
        {
            IGRSS.BusinessLogicLayer.Complain target = new IGRSS.BusinessLogicLayer.Complain();
            FormViewParameter Parameter = new FormViewParameter();
            IGRSS.DataAccessLayer.Complain.ComplainDetailsDataTable dt = new IGRSS.DataAccessLayer.Complain.ComplainDetailsDataTable();
            DataRow dr = dt.NewRow();
            dr["ComplainId"] = new Guid();
            dr["ComplaintNo"] = "YSL456";
            dr["ComplaintType"] = new Guid("85aefd8d-6b7e-4ab8-b124-21b52073f7b3");
            dr["AgainstEmpID"] = new Guid("3c1820f7-bf70-499d-af99-1eb47a33cd9a");
            dr["ComplainingEmpID"] = new Guid("3c1820f7-bf70-499d-af99-1eb47a33cd9a");
            dr["ComplainantName"] = "Sandhya";
            dr["ComplainantAddress"] = "BASKAR RAO,CHENNAI";
            dr["ComplaintDate"] =DateTime.Now;
            dr["ReceivingOfficeId"] = new Guid("d12d7a4b-bb0b-4af7-badf-03f44efd73e7");
            dr["Subject"] ="I AM NOT FILLING WELL SO I COULD'NT COME";
            dr["Detail"] = "I AM NOT FILLING WELL SO I COULD'NT COME";
            dr["CreatedBy"] = "admin";
            dt.Rows.Add(dr);
            Parameter.Values = dt.Rows[0];
            bool expected = true;
            Assert.AreEqual(expected,target.AddNewComplain(Parameter), "IGRSS.BusinessLogicLayer.Leave.AddLeaveDetails did not return the expected value." +
                    "");
        }

        /// <summary>
        ///A test for AssignEnquiryOfficer (string, Guid)
        ///</summary>
        [TestMethod()]
        public void AssignEnquiryOfficerTest()
        {
            IGRSS.BusinessLogicLayer.Complain target = new IGRSS.BusinessLogicLayer.Complain();
            string InvestigatingOfficer ="Pradeep"; // TODO: Initialize to an appropriate value
            Guid ComplainId = new Guid("894c4a04-db7f-40e9-bd5d-107f1352ffa2"); // TODO: Initialize to an appropriate value
            target.AssignEnquiryOfficer(InvestigatingOfficer, ComplainId);
            Assert.AreEqual(true, target.AssignEnquiryOfficer(InvestigatingOfficer, ComplainId), "IGRSS.BusinessLogicLayer.Complain.ComplainDetails did not return the expected value." +
                   "");
            
        }

        /// <summary>
        ///A test for CloseComplainFile (Guid)
        ///</summary>
        [TestMethod()]
        public void CloseComplainFileTest()
        {
            IGRSS.BusinessLogicLayer.Complain target = new IGRSS.BusinessLogicLayer.Complain();
            Guid ComplainId = new Guid("9934e3eb-282d-4776-b242-1277cf75b2ef"); // TODO: Initialize to an appropriate value
            Assert.AreEqual(true, target.CloseComplainFile(ComplainId), "IGRSS.BusinessLogicLayer.Complain.ComplainDetails did not return the expected value." +
                   "");
         }

      

        /// <summary>
        ///A test for DeleteInvesTigationDetails (Guid)
        ///</summary>
        [TestMethod()]
        public void DeleteInvesTigationDetailsTest()
        {
            IGRSS.BusinessLogicLayer.Complain target = new IGRSS.BusinessLogicLayer.Complain();
            Guid InvestigationID = new Guid("341c716a-1519-41d1-95e1-b94171e0aa8a"); // TODO: Initialize to an appropriate value
            target.DeleteInvesTigationDetails(InvestigationID);
            Assert.AreEqual(true, target.DeleteInvesTigationDetails(InvestigationID), "IGRSS.BusinessLogicLayer.Complain.ComplainDetails did not return the expected value." +
                   "");
          
        }

        /// <summary>
        ///A test for GetComplainDetailsByComplainId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetComplainDetailsByComplainIdTest()
        {
            IGRSS.BusinessLogicLayer.Complain target = new IGRSS.BusinessLogicLayer.Complain();
            Guid ComplainId = new Guid("894c4a04-db7f-40e9-bd5d-107f1352ffa2"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetComplainDetailsByComplainId(ComplainId),typeof(IGRSS.DataAccessLayer.Complain.ComplainDetailsDataTable),"IGRSS.BusinessLogicLayer.Complain.GetComplainDetailsByComplainId did not return t" +
                    "he expected value.");
        }

        /// <summary>
        ///A test for GetComplainDetailsByComplainNo (string)
        ///</summary>
        [TestMethod()]
        public void GetComplainDetailsByComplainNoTest()
        {
            IGRSS.BusinessLogicLayer.Complain target = new IGRSS.BusinessLogicLayer.Complain();
            string ComplaintNo ="123"; // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetComplainDetailsByComplainNo(ComplaintNo),typeof(IGRSS.DataAccessLayer.Complain.ComplainDetailsDataTable),"IGRSS.BusinessLogicLayer.Complain.GetComplainDetailsByComplainId did not return t" +
                    "he expected value.");
         }
        /// <summary>
        ///A test for GetInvestigationDetail (Guid)
        ///</summary>
        [TestMethod()]
        public void GetInvestigationDetailTest()
        {
            IGRSS.BusinessLogicLayer.Complain target = new IGRSS.BusinessLogicLayer.Complain();
            Guid ComplainId = new Guid("fcb8faeb-7a67-4593-95db-16f367836e3a"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetInvestigationDetail(ComplainId),typeof(IGRSS.DataAccessLayer.Complain.InvestigationDataTable),"IGRSS.BusinessLogicLayer.Complain.GetComplainDetailsByComplainId did not return t" +
                    "he expected value.");
        }

        /// <summary>
        ///A test for UpdateComplainDetails (FormViewParameter, Guid)
        ///</summary>
        [TestMethod()]
        public void UpdateComplainDetailsTest()
        {
            IGRSS.BusinessLogicLayer.Complain target = new IGRSS.BusinessLogicLayer.Complain();
            FormViewParameter Parameter = new FormViewParameter();
            IGRSS.DataAccessLayer.Complain.ComplainDetailsDataTable dt = new IGRSS.DataAccessLayer.Complain.ComplainDetailsDataTable();
            Guid ComplainId = new Guid("4b532a07-ae79-443b-aafa-0e6150f4b056");
            DataRow dr = dt.NewRow();
            dr["ComplainId"] = new Guid("4b532a07-ae79-443b-aafa-0e6150f4b056");
            dr["ComplaintType"] = new Guid("85aefd8d-6b7e-4ab8-b124-21b52073f7b3");
            dr["AgainstEmpID"] = new Guid("3c1820f7-bf70-499d-af99-1eb47a33cd9a");
            dr["ComplainingEmpID"] = new Guid("3c1820f7-bf70-499d-af99-1eb47a33cd9a");
            dr["ComplainantName"] = "Sandhya";
            dr["ComplainantAddress"] = "BASKAR RAO,CHENNAI";
            dr["ComplaintDate"] = DateTime.Now;
            dr["ReceivingOfficeId"] = new Guid("d12d7a4b-bb0b-4af7-badf-03f44efd73e7");
            dr["Subject"] = "I AM NOT FILLING WELL SO I COULD'NT COME";
            dr["Detail"] = "I AM NOT FILLING WELL SO I COULD'NT COME";
            dr["ModifiedBy"] = "admin";
            dt.Rows.Add(dr);
            Parameter.Values = dt.Rows[0];
            bool expected = true;
            Assert.AreEqual(expected,target.UpdateComplainDetails(Parameter, ComplainId), "IGRSS.BusinessLogicLayer.Leave.AddLeaveDetails did not return the expected value." +
                    "");
          }

       

    }


}
