// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using IGRSS.BusinessLogicLayer;
using IGRSS.BusinessObjects;
using IGRSS.DataAccessLayer;
using System.Data;
using IGRSS.SdcService;
namespace IgrssTest
{
    /// <summary>
    ///This is a test class for IGRSS.BusinessLogicLayer.AdjudicationRequest and is intended
    ///to contain all IGRSS.BusinessLogicLayer.AdjudicationRequest Unit Tests
    ///</summary>
    [TestClass()]
    public class AdjudicationRequestTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        ///// <summary>
        /////A test for AddAdjudicationDetails (FormViewParameter, Guid, Guid)
        /////</summary>
        //[TestMethod()]
        //public void AddAdjudicationDetailsTest()
        //{
            
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    FormViewParameter Parameter = null; // TODO: Initialize to an appropriate value

        //    Guid Id = new Guid(); // TODO: Initialize to an appropriate value

        //    Guid AdjId = new Guid(); // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.AddAdjudicationDetails(Parameter, Id, AdjId);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.AddAdjudicationDetails did not retur" +
        //            "n the expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        ///// <summary>
        /////A test for AddAdjudicationRequest (FormViewParameter, AdjudicationRequestRow, DataTable, DataTable)
        /////</summary>
        //[TestMethod()]
        //public void AddAdjudicationRequestTest()
        //{
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    FormViewParameter ValFormParameter = null; // TODO: Initialize to an appropriate value

        //    Adjudication.AdjudicationRequestRow AdjReqRow = null; // TODO: Initialize to an appropriate value

        //    DataTable FeeDetails = null; // TODO: Initialize to an appropriate value

        //    DataTable DocDetails = null; // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.AddAdjudicationRequest(ValFormParameter, AdjReqRow, FeeDetails, DocDetails);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.AddAdjudicationRequest did not retur" +
        //            "n the expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        ///// <summary>
        /////A test for AddNewDocumentMaster (FormViewParameter)
        /////</summary>
        //[TestMethod()]
        //public void AddNewDocumentMasterTest()
        //{
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    FormViewParameter Parameter = null; // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.AddNewDocumentMaster(Parameter);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.AddNewDocumentMaster did not return " +
        //            "the expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        ///// <summary>
        /////A test for AddNewFeeMaster (FormViewParameter)
        /////</summary>
        //[TestMethod()]
        //public void AddNewFeeMasterTest()
        //{
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    FormViewParameter Parameter = null; // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.AddNewFeeMaster(Parameter);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.AddNewFeeMaster did not return the e" +
        //            "xpected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}
        /// <summary>
        ///A test for GetAdjFeesDetailByAdjId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetAdjFeesDetailByAdjIdTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Guid AdjudicationId = new Guid("074a3ee7-97a4-4d61-95ae-0a902c6bab28"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetAdjFeesDetailByAdjId(AdjudicationId),typeof(IGRSS.DataAccessLayer.Adjudication.AdjudicationFeeDetailsDataTable),"IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjFeesDetailByAdjId did not retu" +
                    "rn the expected value.");
         }

        /// <summary>
        ///A test for GetAdJRequestByFileNo (decimal)
        ///</summary>
        [TestMethod()]
        public void GetAdJRequestByFileNoTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            decimal FileSlNo = 77; // TODO: Initialize to an appropriate value
          //  Assert.IsInstanceOfType(target.GetAdJRequestByFileNo(FileSlNo),typeof(IGRSS.DataAccessLayer.Adjudication.AdjudicationRequestDataTable),"IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjFeesDetailByAdjId did not retu" +   "rn the expected value.");
        }

        /// <summary>
        ///A test for GetAdjudication ()
        ///</summary>
        [TestMethod()]
        public void GetAdjudicationTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Assert.IsInstanceOfType(target.GetAdjudication(),typeof(IGRSS.DataAccessLayer.Adjudication.AdjudicationRequestDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjFeesDetailByAdjId did not retu" +
                    "rn the expected value.");
            

            
        }

        /// <summary>
        ///A test for GetAdjudicationRequestById (Guid)
        ///</summary>
        [TestMethod()]
        public void GetAdjudicationRequestByIdTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Guid AdjudicationId = new Guid("db79200a-7e5f-414e-b3cd-2cf7f34cfce5"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetAdjudicationRequestById(AdjudicationId), typeof(IGRSS.DataAccessLayer.Adjudication.AdjudicationRequestDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                    "eturn the expected value.");
        }

       

        /// <summary>
        ///A test for GetDocumentByValuationFormId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetDocumentByValuationFormIdTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Guid ValuationFormId = new Guid("3e985ff0-4cd0-47e6-94da-434541de1948"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetDocumentByValuationFormId(ValuationFormId), typeof(IGRSS.DataAccessLayer.Adjudication.DocumentChecklistTableDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                    "eturn the expected value.");
        }

        /// <summary>
        ///A test for GetDocumentDetailsById (Guid)
        ///</summary>
        [TestMethod()]
        public void GetDocumentDetailsByIdTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Guid DocumentTypeId = new Guid("e90627b7-b333-425d-a151-762494fe637c"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetDocumentDetailsById(DocumentTypeId), typeof(IGRSS.DataAccessLayer.Adjudication.DocumentMasterDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                    "eturn the expected value.");
            
        }

        /// <summary>
        ///A test for GetDocumentMaster ()
        ///</summary>
        [TestMethod()]
        public void GetDocumentMasterTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Assert.IsInstanceOfType(target.GetDocumentMaster(), typeof(IGRSS.DataAccessLayer.Adjudication.DocumentMasterDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                   "eturn the expected value.");
        }
        /// <summary>
        ///A test for GetFeeDetailsById (Guid)
        ///</summary>
        [TestMethod()]
        public void GetFeeDetailsByIdTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Guid FeeId = new Guid("a9be2b1b-b197-4952-b98e-5216d5d1d1a8"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetFeeDetailsById(FeeId), typeof(IGRSS.DataAccessLayer.Adjudication.FeeMasterDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                  "eturn the expected value.");
         }

       

        /// <summary>
        ///A test for GetFees ()
        ///</summary>
        [TestMethod()]
        public void GetFeesTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Assert.IsInstanceOfType(target.GetFees(), typeof(IGRSS.DataAccessLayer.Adjudication.FeeMasterDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                  "eturn the expected value.");
        }
        /// <summary>
        ///A test for GetValuationFormByAdjudicationId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetValuationFormByAdjudicationIdTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Guid AdjudicationId = new Guid("984a2aa9-e8ac-47be-869b-19a2b66471c9"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetValuationFormByAdjudicationId(AdjudicationId), typeof(IGRSS.DataAccessLayer.Adjudication.ValuationFormDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                  "eturn the expected value.");
        }
        /// <summary>
        ///A test for GetValuationFormDetails (Guid)
        ///</summary>
        [TestMethod()]
        public void GetValuationFormDetailsTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Guid AdjudicationId = new Guid("8cc0268e-5bbd-4244-8e89-5c105bb4be7a"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetValuationFormDetails(AdjudicationId), typeof(IGRSS.DataAccessLayer.Adjudication.ValuationFormDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                  "eturn the expected value.");
         }

      

        /// <summary>
        ///A test for GetValuationFormDetailsByValuationFormId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetValuationFormDetailsByValuationFormIdTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Guid ValuationFormId = new Guid("a070f78d-9bfe-4804-8036-181acf5f1183"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetValuationFormDetailsByValuationFormId(ValuationFormId), typeof(IGRSS.DataAccessLayer.Adjudication.ValuationFormDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                  "eturn the expected value.");
        }
        /// <summary>
        ///A test for GetValuationSheetDetailsByAdjId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetValuationSheetDetailsByAdjIdTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Guid AdjudicationId = new Guid("074a3ee7-97a4-4d61-95ae-0a902c6bab28"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetValuationSheetDetailsByAdjId(AdjudicationId),typeof(IGRSS.DataAccessLayer.Adjudication.ValuationSheetDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                  "eturn the expected value.");
         }
        ///// <summary>
        /////A test for UpdateAdjudicationDetailsById (FormViewParameter, Guid, Guid)
        /////</summary>
        //[TestMethod()]
        //public void UpdateAdjudicationDetailsByIdTest()
        //{
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    FormViewParameter Parameter = null; // TODO: Initialize to an appropriate value

        //    Guid Id = new Guid(); // TODO: Initialize to an appropriate value

        //    Guid AdjId = new Guid(); // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.UpdateAdjudicationDetailsById(Parameter, Id, AdjId);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.UpdateAdjudicationDetailsById did no" +
        //            "t return the expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        ///// <summary>
        /////A test for UpdateAdjudicationRequestById (FormViewParameter, AdjudicationRequestRow, DataTable, DataTable, Guid, Guid, Guid, bool)
        /////</summary>
        //[TestMethod()]
        //public void UpdateAdjudicationRequestByIdTest()
        //{
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    FormViewParameter ValFormParameter = null; // TODO: Initialize to an appropriate value

        //    Adjudication.AdjudicationRequestRow AdjReqRow = null; // TODO: Initialize to an appropriate value

        //    DataTable FeeDetails = null; // TODO: Initialize to an appropriate value

        //    DataTable DocDetails = null; // TODO: Initialize to an appropriate value

        //    Guid ValuationId = new Guid(); // TODO: Initialize to an appropriate value

        //    Guid AdjudicationId = new Guid(); // TODO: Initialize to an appropriate value

        //    Guid AlertId = new Guid(); // TODO: Initialize to an appropriate value

        //    bool Verified = false; // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.UpdateAdjudicationRequestById(ValFormParameter, AdjReqRow, FeeDetails, DocDetails, ValuationId, AdjudicationId, AlertId, Verified);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.UpdateAdjudicationRequestById did no" +
        //            "t return the expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        ///// <summary>
        /////A test for UpdateDocumentMaster (FormViewParameter, Guid)
        /////</summary>
        //[TestMethod()]
        //public void UpdateDocumentMasterTest()
        //{
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    FormViewParameter Parameter = null; // TODO: Initialize to an appropriate value

        //    Guid DocumentTypeId = new Guid(); // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.UpdateDocumentMaster(Parameter, DocumentTypeId);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.UpdateDocumentMaster did not return " +
        //            "the expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        ///// <summary>
        /////A test for UpdateFeeMaster (FormViewParameter, Guid)
        /////</summary>
        //[TestMethod()]
        //public void UpdateFeeMasterTest()
        //{
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    FormViewParameter Parameter = null; // TODO: Initialize to an appropriate value

        //    Guid FeeId = new Guid(); // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.UpdateFeeMaster(Parameter, FeeId);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.UpdateFeeMaster did not return the e" +
        //            "xpected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

      

        ///// <summary>
        /////A test for UpdateValuationRequestDetails (ValuationRequest)
        /////</summary>
        //[TestMethod()]
        //public void UpdateValuationRequestDetailsTest()
        //{
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    ValuationRequest Request = null; // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.UpdateValuationRequestDetails(Request);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.UpdateValuationRequestDetails did no" +
        //            "t return the expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        ///// <summary>
        /////A test for UpdateValuationSheetDetails (ValuationResult)
        /////</summary>
        //[TestMethod()]
        //public void UpdateValuationSheetDetailsTest()
        //{
        //    AdjudicationRequest target = new AdjudicationRequest();

        //    ValuationResult Result = null; // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.UpdateValuationSheetDetails(Result);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AdjudicationRequest.UpdateValuationSheetDetails did not " +
        //            "return the expected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

        /// <summary>
        ///A test for ValuationFormDetails ()
        ///</summary>
        [TestMethod()]
        public void ValuationFormDetailsTest()
        {
            IGRSS.BusinessLogicLayer.AdjudicationRequest target = new IGRSS.BusinessLogicLayer.AdjudicationRequest();
            Assert.IsInstanceOfType(target.ValuationFormDetails(), typeof(IGRSS.DataAccessLayer.Adjudication.ValuationFormDataTable), "IGRSS.BusinessLogicLayer.AdjudicationRequest.GetAdjudicationRequestById did not r" +
                  "eturn the expected value.");
         }

    }



}
