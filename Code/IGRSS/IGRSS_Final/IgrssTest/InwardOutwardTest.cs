//The following code was generated by Microsoft Visual Studio 2005.
//The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using IGRSS.BusinessLogicLayer;
using IGRSS.BusinessObjects;
using IGRSS.DataAccessLayer;
using System.Data;
namespace IgrssTest
{
    /// <summary>
    ///This is a test class for IGRSS.BusinessLogicLayer.InwardOutward and is intended
    ///to contain all IGRSS.BusinessLogicLayer.InwardOutward Unit Tests
    ///</summary>
    [TestClass()]
    public class InwardOutwardTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion
        
        /// <summary>
        ///A test for AddInwardDetails (FormViewParameter)
        ///</summary>
        [TestMethod()]
        public void AddInwardDetailsTest()
        {
            IGRSS.BusinessLogicLayer.InwardOutward target = new IGRSS.BusinessLogicLayer.InwardOutward();
            FormViewParameter Parameter = new FormViewParameter();
            IGRSS.DataAccessLayer.InwardOutward.Inward_OutwardRegisterDataTable dt = new IGRSS.DataAccessLayer.InwardOutward.Inward_OutwardRegisterDataTable();
            DataRow dr = dt.NewRow();
            dr["Inward_outwardId"] = new Guid();
            dr["RegisterType"] = "I";
            dr["DocumentNo"] = "2221";
            dr["InOutDate"] =DateTime.Now;
            dr["DocType"] = new Guid("f21071c4-076b-4040-bf45-412889457dae");
            dr["SentOfficeID"] = new Guid("916fd082-061a-45fb-91a4-33967243b4cf");
            dr["ReceivingOfficeID"] =new Guid("916fd082-061a-45fb-91a4-33967243b4cf");
            dr["DocumentSentFrom"] = "Chennai";
            dr["DocumentSentTo"] ="BANGALORE";
            dr["Description"] = "500";
            dr["StampValueAffixed"] = 20;
            dr["DeliveryType"] =new Guid("8d0413b8-75d9-4c46-9b0b-019b4dcb9253");
            dr["Remarks"] = "500";
            dr["CreatedBy"] ="RAJA";
            dt.Rows.Add(dr);
            Parameter.Values = dt.Rows[0];
            Assert.AreEqual(true,target.AddInwardDetails(Parameter), "IGRSS.BusinessLogicLayer.InwardOutward.AddInwardDetails did not return the expect" +
                    "ed value.");
        }
        /// <summary>
        ///A test for DeleteStampDenomByStampDenomId (Guid)
        ///</summary>
        [TestMethod()]
        public void DeleteStampDenomByStampDenomIdTest()
        {
            IGRSS.BusinessLogicLayer.InwardOutward target = new IGRSS.BusinessLogicLayer.InwardOutward();
            Guid StampDenomId = new Guid("00f8aa73-e0fa-48ab-af2f-9ee66a3735c6"); // TODO: Initialize to an appropriate valu
            Assert.AreEqual(true,target.DeleteStampDenomByStampDenomId(StampDenomId), "IGRSS.BusinessLogicLayer.InwardOutward.AddLeaveDetails did not return the expected value." +
                    "");
        }

        /// <summary>
        ///A test for GetAllInwardDetails ()
        ///</summary>
        [TestMethod()]
        public void GetAllInwardDetailsTest()
        {
            IGRSS.BusinessLogicLayer.InwardOutward target = new IGRSS.BusinessLogicLayer.InwardOutward();
            Assert.IsInstanceOfType(target.GetAllInwardDetails(),typeof(IGRSS.DataAccessLayer.InwardOutward.Inward_OutwardRegisterDataTable), "IGRSS.BusinessLogicLayer.InwardOutward.GetAllInwardDetails did not return the exp" +
                    "ected value.");
        }

        /// <summary>
        ///A test for GetAllPostalStampDenomDetails ()
        ///</summary>
        [TestMethod()]
        public void GetAllPostalStampDenomDetailsTest()
        {
            IGRSS.BusinessLogicLayer.InwardOutward target = new IGRSS.BusinessLogicLayer.InwardOutward();
            Assert.IsInstanceOfType(target.GetAllPostalStampDenomDetails(),typeof(IGRSS.DataAccessLayer.InwardOutward.PostalStampDenomMasterDataTable), "IGRSS.BusinessLogicLayer.InwardOutward.GetAllPostalStampDenomDetails did not retu" +
                    "rn the expected value.");
           

         }

        /// <summary>
        ///A test for GetAllPostalStampRequestDetails ()
        ///</summary>
        [TestMethod()]
        public void GetAllPostalStampRequestDetailsTest()
        {
            IGRSS.BusinessLogicLayer.InwardOutward target = new IGRSS.BusinessLogicLayer.InwardOutward();
            Assert.IsInstanceOfType(target.GetAllPostalStampRequestDetails(), typeof(IGRSS.DataAccessLayer.InwardOutward.PostalStampPurchaseReqDataTable), "IGRSS.BusinessLogicLayer.InwardOutward.GetAllPostalStampRequestDetails did not re" +
                    "turn the expected value.");
        }

        /// <summary>
        ///A test for GetDeliveryType ()
        ///</summary>
        [TestMethod()]
        public void GetDeliveryTypeTest()
        {
            IGRSS.BusinessLogicLayer.InwardOutward target = new IGRSS.BusinessLogicLayer.InwardOutward();
            Assert.IsInstanceOfType(target.GetDeliveryType(), typeof(IGRSS.DataAccessLayer.InwardOutward.PostalStampPurchaseReqDataTable), "IGRSS.BusinessLogicLayer.InwardOutward.GetDeliveryType did not return the expecte" +
                    "d value.");
           

           
        }

        /// <summary>
        ///A test for GetInwardDetailsByInwardId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetInwardDetailsByInwardIdTest()
        {
            IGRSS.BusinessLogicLayer.InwardOutward target = new IGRSS.BusinessLogicLayer.InwardOutward();
            Guid Inward_outwardId = new Guid("c9f38a71-e8fe-4208-b3fc-05d07ccfd9e9"); // TODO: Initialize to an appropriate value
            Assert.AreEqual(true,target.GetInwardDetailsByInwardId(Inward_outwardId), "IGRSS.BusinessLogicLayer.InwardOutward.GetInwardDetailsByInwardId did not return " +
                   "the expected value.");
        }

        /// <summary>
        ///A test for GetPostalDeliveryLkp ()
        ///</summary>
        [TestMethod()]
        public void GetPostalDeliveryLkpTest()
        {
            IGRSS.BusinessLogicLayer.InwardOutward target = new IGRSS.BusinessLogicLayer.InwardOutward();
            Assert.IsInstanceOfType(target.GetPostalDeliveryLkp(), typeof(IGRSS.DataAccessLayer.InwardOutward.PostalDeliveryType_LKPDataTable), "IGRSS.BusinessLogicLayer.InwardOutward.GetPostalDeliveryLkp did not return the ex" +
                    "pected value.");
        }
         /// <summary>
        ///A test for GetPostalStampDenomByStampDenomId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetPostalStampDenomByStampDenomIdTest()
        {
            IGRSS.BusinessLogicLayer.InwardOutward target = new IGRSS.BusinessLogicLayer.InwardOutward();
            Guid StampDenomId = new Guid("26fc0a6d-92ff-4bf7-b488-900098fb0715"); // TODO: Initialize to an appropriate value
            Assert.IsInstanceOfType(target.GetPostalStampDenomByStampDenomId(StampDenomId),typeof(IGRSS.DataAccessLayer.InwardOutward.PostalStampDenomMasterDataTable),"IGRSS.BusinessLogicLayer.InwardOutward.GetPostalStampDenomByStampDenomId did not " +
                    "return the expected value.");
         
        }
        ///// <summary>
        /////A test for UpdateInwardDetails (FormViewParameter, Guid)
        /////</summary>
        //[TestMethod()]
        //public void UpdateInwardDetailsTest()
        //{
        //    InwardOutward target = new InwardOutward();

        //    FormViewParameter Parameter = null; // TODO: Initialize to an appropriate value

        //    Guid Inward_OutwardId = new Guid(); // TODO: Initialize to an appropriate value

        //    bool expected = false;
        //    bool actual;

        //    actual = target.UpdateInwardDetails(Parameter, Inward_OutwardId);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.InwardOutward.UpdateInwardDetails did not return the exp" +
        //            "ected value.");
        //    Assert.Inconclusive("Verify the correctness of this test method.");
        //}

       

       

       
    }


}
