// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using IGRSS.BusinessLogicLayer;
using IGRSS.DataAccessLayer;
namespace UnitTest
{
    /// <summary>
    ///This is a test class for IGRSS.BusinessLogicLayer.Telephone and is intended
    ///to contain all Unit Tests IGRSS.BusinessLogicLayer.Telephone 
    ///</summary>
    [TestClass()]
    public class TelephoneTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetAllTelePhoneDetails ()
        ///</summary>
        [TestMethod()]
        public void GetAllTelePhoneDetailsTest()
        {
            IGRSS.BusinessLogicLayer.Telephone target = new IGRSS.BusinessLogicLayer.Telephone();
            Assert.IsInstanceOfType(target.GetAllTelePhoneDetails(), typeof(IGRSS.DataAccessLayer.Telephone.TelephoneRegisterDataTable), "IGRSS.BusinessLogicLayer.Telephone.TelephoneRegisterDataTable return wrong type of data");
        }

        /// <summary>
        ///A test for GetTelephonedetailsByCallDate (DateTime)
        ///</summary>
        [TestMethod()]
        public void GetTelephonedetailsByCallDateTest()
        {
            IGRSS.BusinessLogicLayer.Telephone target = new IGRSS.BusinessLogicLayer.Telephone();
         
           DateTime date = new DateTime(2007, 07, 04);
           Assert.IsInstanceOfType(target.GetTelephonedetailsByCallDate(date),
                typeof(IGRSS.DataAccessLayer.Telephone.TelephoneRegisterDataTable),
                "IGRSS.BusinessLogicLayer.Telephone.TelephoneRegisterDataTable() return wrong type of data");

         }

        /// <summary>
        ///A test for GetTelePhoneDetailsByEmpId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetTelePhoneDetailsByEmpIdTest()
        {
            IGRSS.BusinessLogicLayer.Telephone target = new IGRSS.BusinessLogicLayer.Telephone();
            Guid EmpId = new Guid("61233b4f-2f6f-403e-a440-34449b352266");
            Assert.IsInstanceOfType(target.GetTelePhoneDetailsByEmpId(EmpId),
                typeof(IGRSS.DataAccessLayer.Telephone.TelephoneRegisterDataTable),
                "IGRSS.BusinessLogicLayer.Telephone.TelephoneRegisterDataTable() return wrong type of data");
         

        }

        /// <summary>
        ///A test for GetTelePhoneDetailsByEmpName (string)
        ///</summary>
        [TestMethod()]
        public void GetTelePhoneDetailsByEmpNameTest()
        {
            IGRSS.BusinessLogicLayer.Telephone target = new IGRSS.BusinessLogicLayer.Telephone();
            string Empname = "as";
            Assert.IsInstanceOfType(target.GetTelePhoneDetailsByEmpName(Empname),
                typeof(IGRSS.DataAccessLayer.Telephone.TelephoneRegisterDataTable),
                "IGRSS.BusinessLogicLayer.Telephone.TelephoneRegisterDataTable() return wrong type of data");
            Empname="";
            Assert.IsInstanceOfType(target.GetTelePhoneDetailsByEmpName(Empname),
                typeof(IGRSS.DataAccessLayer.Telephone.TelephoneRegisterDataTable),
                "IGRSS.BusinessLogicLayer.Telephone.TelephoneRegisterDataTable() return wrong type of data");
            string s = "@";
            Assert.AreEqual(true, target.GetTelePhoneDetailsByEmpName(s), "IGRSS.BusinessLogicLayer.Telephone.TelephoneRegisterDataTable() return wrong type of data");

         }

        /// <summary>
        ///A test for GetTelePhoneDetailsByEmpNo (string)
        ///</summary>
        [TestMethod()]
        public void GetTelePhoneDetailsByEmpNoTest()
        {
            IGRSS.BusinessLogicLayer.Telephone target = new IGRSS.BusinessLogicLayer.Telephone();
            string EmpNo ="321322";
            Assert.IsInstanceOfType(target.GetTelePhoneDetailsByEmpNo(EmpNo),
                typeof(IGRSS.DataAccessLayer.Telephone.TelephoneRegisterDataTable),
                "IGRSS.BusinessLogicLayer.Telephone.TelephoneRegisterDataTable() return wrong type of data");
        }

        /// <summary>
        ///A test for GetTelePhoneDetailsByTelephoneRegId (Guid)
        [TestMethod()]
        public void GetTelePhoneDetailsByTelephoneRegIdTest()
        {
          IGRSS.BusinessLogicLayer.Telephone target = new IGRSS.BusinessLogicLayer.Telephone();
            Guid TelephoneRegID = new Guid("b6811e8e-3f13-484a-9a2f-0a2d2329a1d1");
            Assert.IsInstanceOfType(target.GetTelePhoneDetailsByTelephoneRegId(TelephoneRegID),
                typeof(IGRSS.DataAccessLayer.Telephone.TelephoneRegisterDataTable),
                "IGRSS.BusinessLogicLayer.Telephone.TelephoneRegisterDataTable() return wrong type of data");
          }
 ///</summary>
       
        ///// <summary>
        /////A test for InsertTelephoneDetails (DateTime, Guid, Guid, string, string)
        /////</summary>
        //[TestMethod()]
        //public void InsertTelephoneDetailsTest()
        //{
        //    Telephone target = new Telephone();

        //    DateTime CallDate = new DateTime(); // TODO: Initialize to an appropriate value

        //    Guid EmployeeID = new Guid(); // TODO: Initialize to an appropriate value

        //    Guid CalledEmpID = new Guid(); // TODO: Initialize to an appropriate value

        //    string DialledNo = null; // TODO: Initialize to an appropriate value

        //    string Remarks = null; // TODO: Initialize to an appropriate value

        //    target.InsertTelephoneDetails(CallDate, EmployeeID, CalledEmpID, DialledNo, Remarks);

        //    Assert.Inconclusive("A method that does not return a value cannot be verified.");
        //}

        ///// <summary>
        /////A test for UpdateTelephoneDetails (DateTime, Guid, Guid, string, string, Guid)
        /////</summary>
        //[TestMethod()]
        //public void UpdateTelephoneDetailsTest()
        //{
        //    Telephone target = new Telephone();

        //    DateTime CallDate = new DateTime(); // TODO: Initialize to an appropriate value

        //    Guid EmployeeID = new Guid(); // TODO: Initialize to an appropriate value

        //    Guid CalledEmpID = new Guid(); // TODO: Initialize to an appropriate value

        //    string DialledNo = null; // TODO: Initialize to an appropriate value

        //    string Remarks = null; // TODO: Initialize to an appropriate value

        //    Guid TelephoneRegID = new Guid(); // TODO: Initialize to an appropriate value

        //    target.UpdateTelephoneDetails(CallDate, EmployeeID, CalledEmpID, DialledNo, Remarks, TelephoneRegID);

        //    Assert.Inconclusive("A method that does not return a value cannot be verified.");
        //}

    }


}
