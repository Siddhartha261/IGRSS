// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using IGRSS.BusinessLogicLayer;
using IGRSS.BusinessObjects;
using IGRSS.DataAccessLayer;
using System.Data;
namespace UnitTest
{
    /// <summary>
    ///This is a test class for IGRSS.BusinessLogicLayer.Service and is intended
    ///to contain all IGRSS.BusinessLogicLayer.Service Unit Tests
    ///</summary>
    [TestClass()]
    public class ServiceTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AddServiceDetails (FormViewParameter)
        ///</summary>
        [TestMethod()]
        public void AddServiceDetailsTest()
        {
            Service target = new Service();

            FormViewParameter Parameter = null; // TODO: Initialize to an appropriate value

            target.AddServiceDetails(Parameter);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for GetAllServiceDetails ()
        ///</summary>
        [TestMethod()]
        public void GetAllServiceDetailsTest()
        {
            Service target = new Service();

            Service.ServiceRegisterDataTable expected = null;
            Service.ServiceRegisterDataTable actual;

            actual = target.GetAllServiceDetails();

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.Service.GetAllServiceDetails did not return the expected" +
                    " value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetRow ()
        ///</summary>
        [TestMethod()]
        public void GetRowTest()
        {
            DataRow expected = null;
            DataRow actual;

            actual = IGRSS.BusinessLogicLayer.Service.GetRow();

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.Service.GetRow did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetServiceDetailsByServiceID (Guid)
        ///</summary>
        [TestMethod()]
        public void GetServiceDetailsByServiceIDTest()
        {
            Service target = new Service();

            Guid ServiceID = new Guid(); // TODO: Initialize to an appropriate value

            Service.ServiceRegisterDataTable expected = null;
            Service.ServiceRegisterDataTable actual;

            actual = target.GetServiceDetailsByServiceID(ServiceID);

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.Service.GetServiceDetailsByServiceID did not return the " +
                    "expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetServiceDetailsByServiceNo (string)
        ///</summary>
        [TestMethod()]
        public void GetServiceDetailsByServiceNoTest()
        {
            Service target = new Service();

            string ServiceNo = null; // TODO: Initialize to an appropriate value

            Service.ServiceRegisterDataTable expected = null;
            Service.ServiceRegisterDataTable actual;

            actual = target.GetServiceDetailsByServiceNo(ServiceNo);

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.Service.GetServiceDetailsByServiceNo did not return the " +
                    "expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetServiceDetailsByVendorName (string)
        ///</summary>
        [TestMethod()]
        public void GetServiceDetailsByVendorNameTest()
        {
            Service target = new Service();

            string VendorName = null; // TODO: Initialize to an appropriate value

            Service.ServiceRegisterDataTable expected = null;
            Service.ServiceRegisterDataTable actual;

            actual = target.GetServiceDetailsByVendorName(VendorName);

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.Service.GetServiceDetailsByVendorName did not return the" +
                    " expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UpdateServiceDetails (FormViewParameter, Guid)
        ///</summary>
        [TestMethod()]
        public void UpdateServiceDetailsTest()
        {
            Service target = new Service();

            FormViewParameter Parameter = null; // TODO: Initialize to an appropriate value

            Guid ServiceID = new Guid(); // TODO: Initialize to an appropriate value

            target.UpdateServiceDetails(Parameter, ServiceID);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }


}
