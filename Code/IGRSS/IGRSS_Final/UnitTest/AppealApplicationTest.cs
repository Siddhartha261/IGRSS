// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using IGRSS.BusinessLogicLayer;
using IGRSS.BusinessObjects;
using System.Data;
using IGRSS.DataAccessLayer;
namespace UnitTest
{
    /// <summary>
    ///This is a test class for IGRSS.BusinessLogicLayer.AppealApplication and is intended
    ///to contain all IGRSS.BusinessLogicLayer.AppealApplication Unit Tests
    ///</summary>
    [TestClass()]
    public class AppealApplicationTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AddAppealAplication (FormViewParameter, DataTable)
        ///</summary>
        [TestMethod()]
        public void AddAppealAplicationTest()
        {
            AppealApplication target = new AppealApplication();

            FormViewParameter parameter = null; // TODO: Initialize to an appropriate value

            DataTable dtAct = null; // TODO: Initialize to an appropriate value

            //target.AddAppealAplication(parameter, dtAct);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for AddAppealHearing (Guid, DateTime, string, bool)
        ///</summary>
        [TestMethod()]
        public void AddAppealHearingTest()
        {
            AppealApplication target = new AppealApplication();

            Guid AppealApplicationId = new Guid(); // TODO: Initialize to an appropriate value

            DateTime HearingDate = new DateTime(); // TODO: Initialize to an appropriate value

            string Remarks = null; // TODO: Initialize to an appropriate value

            bool IsJudgement = false; // TODO: Initialize to an appropriate value

          //  target.AddAppealHearing(AppealApplicationId, HearingDate, Remarks, IsJudgement);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for ApproveAppealApplication (Guid, Guid)
        ///</summary>
        [TestMethod()]
        public void ApproveAppealApplicationTest()
        {
            AppealApplication target = new AppealApplication();

            Guid AppealApplicationId = new Guid(); // TODO: Initialize to an appropriate value

            Guid AlertId = new Guid(); // TODO: Initialize to an appropriate value

            target.ApproveAppealApplication(AppealApplicationId, AlertId);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for GetActDetailByApppealId (Guid)
        ///</summary>
        [TestMethod()]
        public void GetActDetailByApppealIdTest()
        {
            AppealApplication target = new AppealApplication();

            Guid AppealApplicationId = new Guid(); // TODO: Initialize to an appropriate value

            DataTable expected = null;
            DataTable actual;

            actual = target.GetActDetailByApppealId(AppealApplicationId);

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AppealApplication.GetActDetailByApppealId did not return" +
                    " the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetAllAppealApplication ()
        ///</summary>
        [TestMethod()]
        public void GetAllAppealApplicationTest()
        {
            AppealApplication target = new AppealApplication();

            Appeal.AppealApplicationDataTable expected = null;
            Appeal.AppealApplicationDataTable actual;

            actual = target.GetAllAppealApplication();

            Assert.AreEqual(expected,actual, "IGRSS.BusinessLogicLayer.AppealApplication.GetAllAppealApplication did not return" +
                    " the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetAllHearingDetails ()
        ///</summary>
        [TestMethod()]
        public void GetAllHearingDetailsTest()
        {
            AppealApplication target = new AppealApplication();

            DataTable expected = null;
            DataTable actual;

            actual = target.GetAllHearingDetails();

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AppealApplication.GetAllHearingDetails did not return th" +
                    "e expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetAppealApplicationByAppealID (Guid)
        ///</summary>
        [TestMethod()]
        public void GetAppealApplicationByAppealIDTest()
        {
            AppealApplication target = new AppealApplication();

            Guid AppealApplicationId = new Guid(); // TODO: Initialize to an appropriate value

            Appeal.AppealApplicationDataTable expected = null;
            Appeal.AppealApplicationDataTable actual;

            actual = target.GetAppealApplicationByAppealID(AppealApplicationId);

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AppealApplication.GetAppealApplicationByAppealID did not" +
                    " return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetAppealApplicationByAppealNo (decimal)
        ///</summary>
        [TestMethod()]
        public void GetAppealApplicationByAppealNoTest()
        {
            AppealApplication target = new AppealApplication();

          //  decimal AppealSlNo = 0; // TODO: Initialize to an appropriate value

         //   Appeal.AppealApplicationDataTable expected = null;
          //  Appeal.AppealApplicationDataTable actual;

      //     actual = target.GetAppealApplicationByAppealNo(AppealSlNo);

        //    Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AppealApplication.GetAppealApplicationByAppealNo did not" +            " return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetAppealApplicationByApplicantName (string)
        ///</summary>
        [TestMethod()]
        public void GetAppealApplicationByApplicantNameTest()
        {
            AppealApplication target = new AppealApplication();

            string ApplicantName = null; // TODO: Initialize to an appropriate value

            Appeal.AppealApplicationDataTable expected = null;
            Appeal.AppealApplicationDataTable actual;

            actual = target.GetAppealApplicationByApplicantName(ApplicantName);

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AppealApplication.GetAppealApplicationByApplicantName di" +
                    "d not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetAppealStatusByAppealNo (decimal)
        ///</summary>
        [TestMethod()]
        public void GetAppealStatusByAppealNoTest()
        {
            AppealApplication target = new AppealApplication();

            decimal AppealSlNo = 0; // TODO: Initialize to an appropriate value

            Appeal.AppealApplicationDataTable expected = null;
            Appeal.AppealApplicationDataTable actual;

            actual = target.GetAppealStatusByAppealNo(AppealSlNo);

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AppealApplication.GetAppealStatusByAppealNo did not retu" +
                    "rn the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetHearingDetailsByAppealID (Guid)
        ///</summary>
        [TestMethod()]
        public void GetHearingDetailsByAppealIDTest()
        {
            AppealApplication target = new AppealApplication();

            Guid AppealApplicationId = new Guid(); // TODO: Initialize to an appropriate value

            DataTable expected = null;
            DataTable actual;

            actual = target.GetHearingDetailsByAppealID(AppealApplicationId);

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AppealApplication.GetHearingDetailsByAppealID did not re" +
                    "turn the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetRow ()
        ///</summary>
        [TestMethod()]
        public void GetRowTest()
        {
            DataRow expected = null;
            DataRow actual;

            actual = IGRSS.BusinessLogicLayer.AppealApplication.GetRow();

            Assert.AreEqual(expected, actual, "IGRSS.BusinessLogicLayer.AppealApplication.GetRow did not return the expected val" +
                    "ue.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for RejectAppealApplication (Guid)
        ///</summary>
        [TestMethod()]
        public void RejectAppealApplicationTest()
        {
            AppealApplication target = new AppealApplication();

            Guid AppealApplicationId = new Guid(); // TODO: Initialize to an appropriate value

            target.RejectAppealApplication(AppealApplicationId);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for UpdateAppealAplication (FormViewParameter, DataTable, Guid, Guid, bool)
        ///</summary>
        [TestMethod()]
        public void UpdateAppealAplicationTest()
        {
            AppealApplication target = new AppealApplication();

            FormViewParameter parameter = null; // TODO: Initialize to an appropriate value

            DataTable dtAct = null; // TODO: Initialize to an appropriate value

            Guid AppealApplicationId = new Guid(); // TODO: Initialize to an appropriate value

            Guid AlertId = new Guid(); // TODO: Initialize to an appropriate value

            bool Verified = false; // TODO: Initialize to an appropriate value

            target.UpdateAppealAplication(parameter, dtAct, AppealApplicationId, AlertId, Verified);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }


}
